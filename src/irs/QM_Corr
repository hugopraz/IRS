import streamlit as st
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
import matplotlib.pyplot as plt
import numpy as np
import py3Dmol
import os

from ir_psi4 import name_to_smiles, cached_geometry_optimization, calculate_frequencies, plot_ir_spectrum as plot_ir_spectrum_psi4
from ir_ORCA import run_orca_from_smiles, estimate_gaussian_sigma, plot_ir_spectrum as plot_ir_spectrum_orca

st.error("✅ THIS IS QM_combiner_fixed.py — your latest version")
st.code(__file__)
st.code(os.getcwd())
st.stop()
# --- UI Setup ---
st.set_page_config(page_title="IR Spectrum Simulator", layout="centered")
st.title("IR Spectrum Simulator")

# --- Backend selection ---
backend_choice = st.radio("Select Quantum Chemistry Engine:", ["Psi4", "ORCA"])

# --- Psi4 method selection ---
if backend_choice == "Psi4":
    psi4_method_choice = st.selectbox(
        "Choose Psi4 Computational Method:",
        ("HF/STO-3G (Fast, Rough)", "B3LYP/6-31G(d) (Balanced)", "MP2/cc-pVDZ (Slow, Accurate)")
    )
    method_mapping = {
        "HF/STO-3G (Fast, Rough)": "HF/STO-3G",
        "B3LYP/6-31G(d) (Balanced)": "B3LYP/6-31G(d)",
        "MP2/cc-pVDZ (Slow, Accurate)": "MP2/cc-pVDZ"
    }
    selected_method = method_mapping[psi4_method_choice]

# --- Input method ---
input_mode = st.radio("Input method", ["Molecule name", "SMILES string"])
smiles = None
molecule_name = None

if input_mode == "Molecule name":
    molecule_name = st.text_input("Enter a molecule name (e.g., ethanol):", "ethanol")
    if molecule_name:
        smiles = name_to_smiles(molecule_name)
else:
    smiles = st.text_input("Enter a SMILES string:", "CCO")

if smiles:
    st.success(f"✅ SMILES found: `{smiles}`")

    if backend_choice == "Psi4":
        st.subheader("Step 1: Psi4 - Geometry Optimization")
        try:
            molecule, rdkit_mol = cached_geometry_optimization(smiles, selected_method)
            st.image(Draw.MolToImage(rdkit_mol, size=(300, 300)), caption="2D Structure")

            viewer = py3Dmol.view(width=400, height=300)
            viewer.addModel(Chem.MolToMolBlock(rdkit_mol), 'mol')
            viewer.setStyle({'stick': {}})
            viewer.setBackgroundColor('white')
            viewer.zoomTo()
            st.subheader("3D Viewer")
            st.components.v1.html(viewer._make_html(), height=300)

            st.subheader("Step 2: Psi4 - Frequency Calculation")
            with st.spinner("Running Psi4 frequency calculation..."):
                freqs, intensities, elapsed_time, ir_available = calculate_frequencies(molecule, selected_method)

            if freqs is not None:
                st.success(f"Found {len(freqs)} vibrational modes. Computed in {elapsed_time:.2f} s")
                fig = plot_ir_spectrum_psi4(freqs, intensities)
                st.pyplot(fig)
            else:
                st.error("Psi4 failed to compute the IR spectrum.")
        except Exception as e:
            st.error(f"Error: {e}")

    elif backend_choice == "ORCA":
        st.subheader("Step 1: ORCA - Full Pipeline")
        try:
            with st.spinner("Running ORCA pipeline (geometry + frequency)..."):
                results = run_orca_from_smiles(smiles, name=molecule_name or "orca_job")

            if results:
                freqs, intensities = zip(*results)
                widths = [estimate_gaussian_sigma(f) for f in freqs]
                st.success(f"Extracted {len(freqs)} IR-active modes from ORCA output.")
                plot_ir_spectrum_orca(freqs, intensities, widths=widths)
            else:
                st.error("ORCA failed to return valid IR data.")
        except Exception as e:
            st.error(f"Error during ORCA execution: {e}")
else:
    st.error("❌ Could not resolve a valid SMILES string.")